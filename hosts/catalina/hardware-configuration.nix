# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  inputs,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "nvme" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel" "amdgpu" "apple_bce" "hid_apple"  "apple_gmux"];
  boot.kernelParams = [
    "brcmfmac.feature_disable=0x82000"
    "apple_gmux.force_igd=y"
    "i915.enable_guc=3"
    "i915.enable_fbc=1"
    "mem_sleep_default=deep"
  ];

  
  services.udev.extraRules = ''
    KERNEL=="card2", SUBSYSTEM=="drm", DRIVERS=="amdgpu", ATTR{device/power_dpm_force_performance_level}="low"
  '';
  
  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0f1u1.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp9s0u2u1c2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  hardware.graphics.extraPackages = [
    pkgs.intel-media-driver
    #pkgs.rocmPackages.clr.icd
    pkgs.amdvlk
  ];

  # we don't need this because of our boot.extraModprobeConfig
  # also it causes an annoying error when it can't find bootx64.efi
  hardware.apple-t2.enableAppleSetOsLoader = false;
}
